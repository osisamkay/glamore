// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Float
  image       String
  category    String
  colors      String   // Comma-separated colors like "Red,Blue,Green"
  sizes       String   // Comma-separated sizes like "XS,S,M,L,XL,XXL"
  quantity    Int      @default(50) // Total inventory quantity
  rating      Float?   @default(4.0)
  reviewCount Int?     @default(0)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  cartItems   CartItem[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("customer") // customer, admin, customer_service
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  cartItems CartItem[]
  orders    Order[]
}

model CartItem {
  id                String   @id @default(cuid())
  productId         String
  quantity          Int      @default(1)
  size              String
  color             String
  userId            String?  // Link to user instead of session
  sessionId         String?  // Keep for guest users
  bespoke           Boolean? @default(false)
  customMeasurements String? // JSON string of measurements
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([productId, size, color, userId])
  @@unique([productId, size, color, sessionId])
}

model Order {
  id           String      @id @default(cuid())
  firstName    String
  lastName     String
  email        String
  phone        String
  address      String
  city         String
  province     String
  zipCode      String
  deliveryType String      @default("normal")
  paymentMethod String     @default("card")
  giftCardCode String?
  giftCardAmount Float?    @default(0)
  subtotal     Float
  salesTax     Float
  shipping     Float
  total        Float
  status       String      @default("pending")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  items        OrderItem[]
  userId       String?
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  name      String
  price     Float
  quantity  Int
  color     String
  size      String
  image              String
  customMeasurements String? // JSON string of measurements
  createdAt          DateTime @default(now())
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model GiftCard {
  id        String   @id @default(cuid())
  code      String   @unique
  balance   Float
  isActive  Boolean  @default(true)
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enquiry {
  id          String   @id @default(cuid())
  fullName    String
  email       String
  subject     String
  orderNumber String?
  description String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id           String   @id @default(cuid())
  productId    String
  orderId      String
  orderItemId  String
  rating       Int
  comment      String?
  customerName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ReturnRequest {
  id            String              @id @default(cuid())
  orderId       String
  reason        String
  status        String              @default("pending")
  customerEmail String
  requestedAt   DateTime            @default(now())
  processedAt   DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  items         ReturnRequestItem[]
}

model ReturnRequestItem {
  id              String        @id @default(cuid())
  returnRequestId String
  orderItemId     String
  productId       String
  quantity        Int
  price           Float
  createdAt       DateTime      @default(now())
  
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id], onDelete: Cascade)
}